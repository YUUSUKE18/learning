= 実務で通用する設計・プログラミングスキルの学び方

//flushright{
FORTE(フォルテ)@FORTEgp05
//}

ITエンジニアに必要なスキルとして設計とプログラミングは外せないでしょう。もちろん他にも必要なスキル、あった方がいいスキルはありますが、もっとも現場で必要とされる機会が多いのはこのふたつではないでしょうか。

この章では実務で通用するレベルで、設計とプログラミングスキルを学ぶにはどうしたらいいか、考えてみます。

== 「実務で通用する」の定義

まず「実務で通用する」とはどういう状態なのか、きちんと確認しておきましょう。ここがずれていると、せっかく学んだのに現場で役立つものかわからなくなったり通用しない知識になってしまいます。まずは全般的に実務で通用するレベルとはなにかを確認し、そのあと設計とプログラミングでそれぞれ見ていきます。

=== 実務で通用するとは

==== 通用するかどうかの判断方法
自分のスキルが実務で通用するかどうか分からないと思うのであれば、視座を一段あげて考えてみることをお勧めします。もしあなたがマネージャーやリーダーのような指示をする側だったとして、あなたにその作業(設計やプログラミング)を任せられると思えるでしょうか？

安心して任せられると想像できるならあなたのスキルは実務で通用すると言えるでしょう。逆に不安だな、心配だな、難しいなと思うなら実務で通用するレベルに至っていないかもしれません。しかし安心してください。業務では100%安心して任せられるから作業を指示するということの方が稀です。多くの場合、やったことないけどできそうだからやらせてみる(やってもらう)というケースの方が圧倒的に多いです。

==== スキルアップの考え方
そのため逆に言えば、不安や心配な点をカバーできれば実務で通用すると言えます。具体的には「設計書の書き方が不安なので一通り書けたらご確認いただけますか？」とか「実装はできますが、もっと良い書き方があるかもしれないので一通り書けたらご確認いただけますか？(またはペア・モブプログラミングしていただけますか？)」のように自分が不安に思う点を補足するようにすれば十分実務で通用すると言えるでしょう。

もしそんな不安や心配な点を素直に伝えて大丈夫かなと思われたら安心してください。往々にして現場のリーダーやマネージャーというのはメンバーの教育、スキルアップも業務に入ってます。そのため、メンバーから教育してほしい点を伝えてもらえるのはむしろありがたいことなのです。稀にコイツは使えないヤツだな…のように判断するリーダーやマネージャーがいますが、その場合はこちらから見限るチャンスです。メンバーのスキルアップに貢献できるリーダーやマネージャーの元に移動しましょう。

=== 実務で通用する設計スキル

それでは設計における実務で通用するスキルを考えてみます。

==== 設計に求められるスキルとは
まず設計に求められることが、工程や環境、ステークホルダー、プロダクト、開発ルール、設計対象などによって違ってきます。そのため、これができれば実務で通用すると一言でいうのは難しいです。たとえば設計書を書く必要がない環境で設計書が書けますといっても何も意味がないですし、逆に設計書が必要な環境で設計書を書いたことがないですと言ってしまうと相手にこの人に任せて大丈夫かなと不安を与えてしまいます。まずは自分がいる環境を正しく観察、把握して設計の中でも必要なスキルを考えてみましょう。

==== 設計書を書く場合に必要なスキルを考える
例えばもし設計書を書く必要があるのなら過去に書かれた設計書を参考にして書けるかどうか、書けないのなら何が書けないのかを考えてみます。もし書けないのが文章なのであれば実際に設計書を書く練習をしてみるのが一番です。もし技術的な問題であればその技術について学ぶ必要があるでしょう。たとえばDB設計書を書こうと思った際にER図やリレーション関係、正規化などがわからないのであれば設計書に起こせませんので、そういった技術を学ぶ必要があります。このように問題(困難)を分割することで、曖昧で大味だった「設計ができない」という問題(不安や心配)から、より具体的ではっきりしたER図の書き方を知らないのように変換できます。ここまでくれば簡単です、ER図の書き方を調べて練習すれば設計書を書けるようになります。

==== 困難の分割と問題と対策の具体化
設計書の書き方について例を出しましたが、要件定義や技術選定、詳細設計なども同じです。それぞれ何が必要で、自分には何かできない、不安、心配なのかを洗い出し、問題を分割して具体的にしていくことで学ぶ対象をはっきりさせることができます。これは先に述べた通り環境などによって変わるので、繰り返しになりますがまず自分がいる環境で何が必要なのかを明確にしてから明確にしていきましょう。

=== 実務で通用するプログラミングスキル

次にプログラミングにおける実務で通用するスキルについて考えてみます。これは単純です、実装できるかどうか、その環境で求められる品質やルールに適したものにできるかどうかです。

==== 実装できるか
まず実装できるかどうかは単純ですね、そのプログラミング言語で要求されたプログラムを書けるかどうかです。これも何も調べずに書ける必要はありません。細かい文法などは調べながら書いてもいいですが、書こうと思った際に何からしたらいいんだろう？と固まってしまうようであれば実務で通用するとは言えないでしょう。もちろん詳しい人に助けてもらいながら進めて良いのですが、事前に助けてもらうことを明言してから進めるのと、できますと言ってから助けてもらうのでは印象が異なります。もし不安や心配事があるのであれば、できるかどうか確認する(検討する)のでちょっとお時間をくださいのように予防線をひいておくのもいいでしょう。

==== 求められる品質やルールを満たせるか
次に品質や開発ルールに則っているかが求められます。必要なエラー処理が抜けていたり、エラーや例外が発生した際に適切に処理ができいない、DRY原則やYAGNI原則に反しているなど書けているし動きもするが、リリースできる状態にないコードでは実務に通用するとは言えないでしょう。ここで現場でありがちな例が、品質の悪いプロジェクト内のソースを参考にしてしまい指摘されてしまうケースです。これはスタートアップでとにかく早くリリースすることを目的としていた場合や有識者が少ない(いない)場合、デスマーチでとにかく納期に間に合わせた場合などに起こりがちなのですが、DRY原則に反していても、多少のエラー処理がなくても動くのならリリースしてしまったことにより技術的負債として残ったソースであり、それを知らない人がこのプロジェクトはこのレベルでいいんだなと真似して実装するとレビューで指摘されてしまうというものです。

==== 事前に求められているレベル(期待値)を確認する
これはまず期待値を調整すると回避できることが多いです。具体的には参考にできる既存ソースはこれでよいですか？や参考にするにあたって注意点はありますか？など参考にする際にお互いの期待値を調整すること、またはこれから実装するソースは品質優先か速度優先かどちらなのか、もし実装上で守るべき開発ルールや原則があれば教えて欲しいなどのように期待値調整するのも有効です。これにより環境に合わせて適切な品質のコードを提出することができるようになります。これなら実務に通用すると言えるのではないでしょうか。

== 実務で通用するスキルの学び方

実務で通用するとは具体的にどういうことかを考えてみました。では、それを満たすためにはどのように学べばいいのでしょうか。設計とプログラミングに分けて学び方を考えてみます。

=== 設計スキル

定義で確認したとおり、設計においてどのようなスキルが必要なのかはその環境などによって変わってしまいます。そのため、学び方としては一般的な開発知識として設計論を学ぶ方法と、いまいる環境に合わせて学ぶ方法の大きく2通りが考えられると思います。一般的な開発知識としての設計論は「システム開発 設計論」などで検索すれば技術書がヒットすると思いますので、それらから学ぶことができるでしょう。書籍以外にもUdemyなどにも設計に関する講座があるので購読してみても良いかもしれません。

==== 現場に合わせて学ぶ方法
次にいまいる環境に合わせて学ぶ方法は、そのプロジェクトですでに作成されている設計書やドキュメントを参考に自分が担当している機能の設計書を書いてみたり、そのプロダクトに機能を新たに実装するとしたらどんな設計書やドキュメントを書く必要があるか考えて実際に書いてみるなどが良いでしょう。可能であればそれらをチーム内の誰かにレビューしてもらうとより学びが深まります。実際に作業することも大事ですが、フィードバックをもらうことも大事です。人はどうしても視野が狭くなりがちです。自分では問題ないと思っていても客観的にはそうではない、またはもっと良くするための新たな視点が必ず存在するものです。そう言った意味でフィードバックは重要と言えます。もし、チーム内でフィードバックをもらうのが難しいのであれば、外部でもらうことも検討しましょう。その際は機密情報漏洩にならないようにシステムや用語を一般的なものに置き換えたものに対してフィードバックをもらうようにします。例えばYoutubeにコメントが流れる機能を付けるとしたらどうすればよいか？などを考え、必要な設計書を書いて誰かにレビューしてもらうなどのイメージです。工夫すればできることは必ずあるはずです。

=== プログラミングスキル

プログラミングはまず書けるようになることと、一定以上の品質を担保することの2段階があると思います。

==== まず書けるようになること
まず書けるようになることはif文やfor文などの一般的な制御構文はもちろん、その言語独自の言語仕様を把握しておく必要があります。これは全ての仕様を把握すべきという意味ではなく、存在を知っている程度でも大丈夫です。必要になるかどうかはわからないですし、必要になった時に調べるのでも大体のケースは間に合います。ごく稀に調べている時間がないというケースもあるかもですが、その際は詳しい方に聞けばいいですし、聞ける人がいないのならもう調べるしかありません。覚えておいて損はないと思いますが、時間をかけて言語仕様を暗記するくらいだったら調べながらでも動くプロダクトを作る経験をした方が時間の使い方としては有意義なのではないかなと思います。

==== 求められるレベルのコードにすること
次に一定以上の品質を担保する必要があります。ここでいう一定以上のとは開発ルールに則っているか、という意味です。極端な話、自分1人でしかメンテナンスしないコードであれば、どんなコードを書いても自分しか見ないので問題ないかもしれません。ですが、多くの場合がチーム開発であり、何かしらの開発ルールがあるものなので、それに則ったコードを書けるようになる必要があります。これは開発ルールごとによって異なるので具体的にこれをとは書きづらいですが、一般的に読みやすいコードを書けるようになっておくのは有効かと思います。名著リーダブルコードなど、読みやすいコードについて書かれた技術書はたくさんありますのでそれらで勉強すると良いでしょう。きっとそこで勉強した概念が開発ルールに取り込まれていると思いますし、独自のものがあればあらためて勉強すれば大丈夫です。
