= 学びと言語化

//flushright{
@erukiti
//}

「学ぶ」とは何だろうか？「まねぶ」が語源だの、知識を得る行為といった辞書に書いてある事はさておき、学ぶとは本質的には自己変容だ。少し大げさな言い方に聞こえるかもしれないが、我々は物事を知らない状態から、学習を通じて、理解する状態へと変化していく。

「学び」とは何だろうか？学びは、学んで得た知識や経験、そしてその獲得過程全体を指す。学びには二つの形態がある。一つは経験や直感として個人の内部に留まる「暗黙知」だ。自転車の乗り方のように、言葉で説明するのが難しい知識だ。もう一つは、言葉や図表で表現された「形式知」だ。教科書やマニュアルのように、誰でも共有できる形に整理された知識だ。学びは暗黙知として始まり、言語化を経て形式知となる。それによって自分の理解が深まり、他者とも共有できるようになる。これこそが、皆さんが目にする一般的な学びの形だ。

現代は大量の情報が流通していて、その中に多くの言語化された学びがある。ブログや本、同人誌は、それらの典型的な形だ。学びを読者に伝えるための物だ。今この本を手に取っている読者は、まさに言語化された学びを読んでいて、ここから何かを学んで自己変容を遂げようとしている。あるいはもう既に自己変容した後だろうか。

この奥深い学びの本質に迫るために、まず避けて通れないのが「言語化」という要素だ。なぜなら、言語化は学びを深め、定着させ、共有可能にする核心的なプロセスだからだ。

これから数章にかけて、筆者なりの学びについての考察をお伝えしていきたい。

それでは、この学びにおいて最も重要な言語化について、具体的に掘り下げていこう。

== 言語化とは何か

言語化について、まずはシンプルな座学のケースをもとに学びのプロセスを考えよう。

我々は何かを学ぶときに、まず情報をインプットする。これは読書かもしれないし、ウェブ検索で見つけたページや、講義の受講かもしれない。他者が言語化したそれを読むなり、聞くなりする。

次に、その情報を自分の中でかみ砕いて整理する過程で、より意識的な言語化が行われる。「なるほど、これはこういう意味を持つのか」「これには共通点があるな」といった具合に、インプットしたものからの気づきを言葉にする。そのとき、既存の知識と結びつけることで、より深い理解が生まれる。

最後に、理解した内容を言語化してアウトプットすることで、学びはより確かなものとなる。これは口頭で説明することもあれば、文章として書き記すこともある。人に伝えるためには分かるように説明しなければならないし、分かりづらい説明をすれば質問が飛んでくることもある。テスト勉強で、他人に教えると理解が深まる現象を考えれば分かりやすいだろう。

では、このプロセスを踏まえて、言語化の本質について考えてみよう。

言語化とは、単なる言葉への置き換えではない。我々は日常的に言語を用いて思考しているが、それと意識的な言語化には本質的な違いがある。その違いは主に三つの点に現れる。

第一に、構造化の度合いが挙げられる。我々の日常的な思考では、言語だけでなく、イメージや感覚、直感的な理解など、様々な要素が未整理のまま混在している。「なんとなくそう思う」「どことなく良い感じがする」といった曖昧な認識が大半を占め、それらの論理的な関係性も曖昧なままとなっている。

第二に、意識的な分析の有無だ。日常的な言語使用が無意識的・自動的なのに対し、言語化は意図的な分析のプロセスを必要とする。例えば「なんとなく良い」と感じている商品があったとする。これを言語化する際には、その感覚の背景にある要素を一つ一つ検討し、「価格が3000円と手頃で、デザインが主張しすぎず落ち着いており、必要な機能が過不足なく揃っている」といった具体的な要因に分解していく。

第三に、検証可能性の違いがある。漠然とした印象は主観的で検証が難しいが、言語化された内容は他者による確認や批判が可能だ。「コストパフォーマンスが優れている」という結論も、具体的な根拠があってこそ意味を持つ。現代であればこの他者はChatGPTで検証できる。

このように言語化とは、漠然とした思考を、意識的に整理・構造化し、他者と共有可能な形に表現するプロセスだ。

== 言語化の重要性：プログラミングの例から

プログラミングの世界には、半年後の自分は別人だと思えという格言がある。半年後の自分は文脈を忘れた状態で、自分が書いたソースコードを、まるで他人が書いたもののように読むことが多いからだ。これは言語化の重要性を端的に示す例だ。

プログラミングとはソースコードを書いて、それをプログラムとして動かすものだ。ソースコードはコンピュータ専用の特殊な言語であって、人間にとってわかりやすい言葉ではない。ソースコードは、難解な指示書のようなものだ。

指示書からは、書いた当時の経験、思想そういったものは失われやすい。なぜこういう形の指示にしたのか？なぜこういう形の指示にしなかったのか？選択肢が複数あるとき、どうしてこれを選んだのか？当時はおそらく根拠があったはずだ。経験、知識、意思決定の基準そういったものだ。これらは単なる指示書からは読み取りづらいものだ。だからこそ人間が読み書きしやすい言葉で、失われやすい情報を書き記しておくべきだ。

//emlist[コメントの例]{
// このアルゴリズムを選んだ理由：
// * データサイズが小さいため、メモリ効率より可読性を重視
// * 将来の機能拡張を考慮し、モジュール化を優先
// * チームでの保守性を考慮し、標準的な実装方法を採用
//}

もちろんこれは、プログラミングに限った話ではなく、学びにおいても同様だ。我々は学んだ内容を十分に理解したつもりでも、時間が経つと詳細を忘れてしまう。その時の文脈や、重要だと考えた背景も、徐々に失われていく。

しかし、学びを言語化し文書として残しておけば、それらの情報は保持できる。未来の自分がその文書を読み返すことで、当時の学びを再現できる。検索可能な形であれば、必要な時に必要な情報を素早く取り出すこともできる。

それでは次に、言語化を実際にやってみよう。

== 言語化をやってみよう

言語化の練習方法には様々なものがあるが、最も基本的なアプローチは、筆者が「思考の垂れ流し」と呼ぶ方法である。これは、アイデアの整理や推敲を気にせず、思いついたことを文字として書き記していく作業だ。

キーボードで入力するにせよ、鉛筆やペンでノートに書くにせよ、重要なのは思考を明示的に外部化することだ。文字として外に追い出すことで、思考の整理が促進される。他人に見せないことを前提とすれば、より自由な表現が可能となる。

//quote{
合同誌で、学び本だすことになったけど、そもそも何を書けばいいのかな。学びについては何かしらあるはずだから僕に書けることはあるはずだけど、読者は何を読みたいのだろうか。新しい技術の習得は好きだし、そういうことを書けばいいのだろうか。ReactとかLLMのことを書いてしまうとそれを知らない読者を置いてけぼりにするよな。であれば、汎用的な話を書いた方がいい気がする。汎用的なぶん他の人も同じ事を書いちゃう？まぁそれはあとで考えればいいか。まずは雑に検索からはじめてみよう
//}

このような思考の垂れ流しは、まだ整理されていない生の思考の記録だ。次のステップとして、これを構造化された形に整理していく。箇条書きは、思考を構造化する上で特に効果的なツールである。

 * 何を書くか？
 ** 読者が読みたいもの
 ** 新しい技術の習得
 *** 詳細に踏み込むと読者を置いてけぼりにしてしまう
 *** 汎用的なことを書く
 ** 他の人と被ることは気にしない

この例からわかるように、最初の散漫な思考が、箇条書きによって明確な構造を持った形に整理されている。慣れていない人は、思考の垂れ流しと、それを箇条書きにまとめる作業は分けて行うことをお勧めする。

さらに、図や表の活用も効果的な手法である。文章は本質的に一次元の構造だが、図表であれば二次元的な思考が可能となり、要素間の関係性をより直感的に把握できる。

パソコン上でのマインドマップや付箋ツールの利用、あるいは実際の付箋を使用した手書きの方法など、自分に合った形式を見つけることが重要である。

====[column] 筆者は言語化が苦手だった

筆者は、雑誌に記事を書いたり、同人誌を書いたり、商業化したり、ブログがそれなりの頻度でバズることがある、言ってしまえば文章を書くセミプロのようなことをしている。仕事においても言語化能力をフル活用している。

ところが昔の筆者は言語化がとても苦手だった。言葉にできないもどかしさを抱えていた。人に伝わらない。人に言いたいはずのことを言えない。やり込められる。納得がいかない。

そこで始めたのがブログだった。しょうもないことをつらつら書き連ねるブログだ。場所を変え、アカウントを変え、文章を書いてきた。

本格的に文章を書くようになったのは2017年に技術同人誌を出してからだ。この頃には文章を読み書きするのにも慣れて、ブログがバズるようになった。

元々は、思考の垂れ流しという手法も、言語化の練習の一つだった。それは今でも活用している。本文中にも書いてたよう第二の思考領域として活用することで、頭をすっきりできるからだ。

そうやって意識して鍛えてきた結果、言語化は様々な場面で使えるスキルに成長した。

====[/column]

== 言語化の困難さと限界

言語化の利点を述べてきたが、このプロセスには本質的な困難さが伴う。特に、複雑な感情や直感的な理解の言語化には大きな課題が存在する。

たとえば、音楽の感動を言語化する場合を考えてみよう。「この曲は心に響く」という感覚を、具体的な言葉で説明しようとしても、その本質を完全に捉えることは難しい。「印象的なメロディーライン」や「心地よいリズム」といった表現を用いても、その感動の全体を言い表すことはできない。

専門的な内容を初学者に説明する際の言語化も、高度なスキルを要する。例えば、プログラミングの非同期処理について、プログラミングの知識がない人に説明することは極めて困難である。料理の手順のような直線的な処理とは異なる実行の流れを、どのように言葉で表現すればよいのだろうか。

さらに、すべての学びが言語化できるわけではない。自転車の乗り方のような身体的なスキルは、言葉だけでは十分に伝えることができない。「バランスを取る」という指示だけでは、実際の感覚を掴むことは困難である。料理人が「火加減は経験で覚えるしかない」と言うのも、この類の学びの特質を示している。

職人の技術も同様である。熟練した大工が「この木は柱に適している」と判断する際、その判断基準には木目の細かさ、色味、重さ、手触りなど、多様な要素が複雑に絡み合っている。その判断は確かな精
度を持つが、そのプロセス全体を言語化することは容易ではない。
しかし、このような困難さがあるからこそ、言語化への挑戦は重要な意味を持つ。言語化の限界を認識しつつ、可能な範囲で言語化を試みることで、理解は深まり、他者との共有も可能となる。例えば、身体的な学びであっても、野球選手のフォームを物理学的に分析したり、料理の火加減を温度計で数値化したりすることで、部分的な言語化は可能となる。完璧な言語化は難しくとも、その過程での気づきが学びをより確かなものとするのである。

== 学びのコミュニティにおける言語化の役割

言語化の意義は、個人の学びを超えて、コミュニティ全体の知識発展にまで及ぶ。技術書典やコミケのような同人誌即売会、テックブログ、プログラミングのQAサイトなどでは、個人の学びが言語化され、共有されることで、コミュニティ全体の知識が豊かになっていく。本書もまた、そのような知識共有の一環として位置づけられる。

個人の言語化された学びは、他者の新たな学びのきっかけとなり、その連鎖は知識の螺旋的な発展をもたらす。このプロセスは、特にオープンソースソフトウェアの開発コミュニティにおいて顕著に観察される。
== 言語化のさらなる練習方法：ブログを始めよう

思考の垂れ流しと箇条書きによって、自分の考えを整理する方法は説明した。次はそれを誰かに伝えてみよう。ブログは、言語化の練習にとても向いている。

 * 匿名での開始が可能
 * 読者からのフィードバックが期待できる
 * 実践的な言語化の機会となる

もしあなたがブログを書き慣れていないなら、是非ブログを書き始めるべきだ。まずは、ブログサービスでアカウントを適当に作ってみよう。練習なのだから、失敗してもいいように、自分の本名やよく使う名前を避けて、新規の名前で初めてみるといい。

ブログを書き慣れていないなら「しずかなインターネット@<fn>{erukiti-sizu}」は日々思ったことを言語化するのに最適な場所だ。バズりづらいが、名前のとおり、しずかで荒れにくい。

note@<fn>{erukiti-note}はバズりやすく活発なので、慣れてきたら力試しができる。ソフトウェア技術者ならQiita@<fn>{erukiti-qiita}やZenn@<fn>{erukiti-zenn}も良いだろう。

学びという題材からは少しだけズレるかもしれないが、小説のような形であれば、小説家になろう@<fn>{erukiti-narou}・カクヨム@<fn>{erukiti-kakuyomu}がいいだろう。学びを小説というかたちで伝えられるかもしれない。人類は物語を介して様々な学びを伝えてきた歴史を持っている。

//footnote[erukiti-sizu][https://sizu.me/]
//footnote[erukiti-note][https://note.com/]
//footnote[erukiti-qiita][https://qiita.com/]
//footnote[erukiti-zenn][https://zenn.dev/]
//footnote[erukiti-narou][https://syosetu.com/]
//footnote[erukiti-kakuyomu][https://kakuyomu.jp/]

 * 日々の言葉を練習するなら、しずかなインターネットが一番おすすめできる
 * noteは活発だし、書きやすいので、力試しに向いている
 * ソフトウェア技術者なら、QiitaかZennが良い。フトウェア技術を伝えるならnoteよりも望ましい
 * 小説なら、小説家になろう・カムヨムがいいだろう

アカウントを作ったらブログを書くことそのものに慣れよう。自分の思いや得たものを何でもいいので書いて、伝える練習から始めればいい。書けば伝わるとは限らないし、読んだ人が誤った解釈をしてしまうかもしれないが、匿名で始めることで恥ずかしさや失敗に怯えなくて済む。

慣れてきたら、学びをブログに書いてみよう。たとえばソフトウェア技術者なら、自分が使っている技術について、しょうもないことでもいいから学びをブログに書けばいい。手順を書いてみて、成功したこと・失敗したこと、考えたこと・感じたこと、難しかったこと・簡単だったことを書いてみよう。そこに、何かしらの学びがあれば、それを書いてみよう。

これを何回も繰り返せばいい。自分が書きたいものはこれではないと思ったら、新しいアカウントを作り直せばいい。

 * まずは、しずかなインターネットで、日々の言葉を書く練習をする
 * noteやQiitaやZennで力試しをする
 * 書きたいものがこれではないと思ったら、新しいアカウントを作り直す

こういった目的にはSNSもありだ。Twitterは元々マイクロブログと呼ばれていた。最初は140文字に限定されたブログだったのだ。

あなたが何かしらのエンタメが好きなら、そのエンタメの感想や考察をつぶやいてみるといい。このときもブログと同じように新規アカウントを作ることをおすすめする。メインの人格でやってしまうと、取り返しがつかないミスをしてしまうこともありえるからだ。

失敗しても大丈夫な新規のアカウントなら、あなたも安心して言語化の練習ができるだろう@<fn>{erukiti-anonymous}。

//footnote[erukiti-anonymous][もちろん匿名性を過信して、誹謗中傷など犯罪行為を行えばその限りではない。]

うまくいくことがわかれば、改めて自分のアイデンティティとなる名前で活動すればいい。

== まとめ

学びと言語化は不可分の関係にある。思考を言語化することで理解は深まり、その学びは持続可能なものとなり、さらには他者との共有も可能となる。すべての学びを完全に言語化することは困難だが、だからこそ、その試みには意義がある。

デジタル技術の発展は、言語化のための手段を多様化させている。これらを効果的に活用し、定期的な言語化を習慣とすることで、より深い学びが可能となる。

そして最も重要なのは、言語化された学びの共有が、コミュニティ全体の知識発展に寄与するという点である。我々は学ぶだけでなく、その学びを言語化し、共有していくことで、より豊かな知的環境を築いていけるのである。
