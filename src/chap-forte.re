= チーム開発におけるコミュニケーションの学び

== はじめに

//flushright{
FORTE(フォルテ)@FORTEgp05
//}

どうも、本章の執筆者のFORTE(フォルテ)です。私はITエンジニアとして16年目に入り、さまざまな現場でチーム開発を経験してきました。その中でチーム開発におけるコミュニケーションの取り方について学ぶところが多かったので、今回は「チーム開発におけるコミュニケーションの学び」と題して1章書きたいと思います。

なお、本章の内容は個人的にZennにアップした以下の記事を元に大幅に加筆・訂正した内容となっています。余談ですが、この記事をアップした際のツイートは私の中で最大のバズりとなりました。

@<href>{https://zenn.dev/forte/articles/822c75cbb53519}

業務でシステム開発をするとなると、個人で開発するケースもあるかとは思いますが、多くはチーム開発になるでしょう。そこで避けては通れないのが、チームメンバーとのコミュニケーションです。このコミュニケーションは大きく次の3つに分かれると思います。

 * リーダーからメンバーへのコミュニケーション
 * メンバーからリーダーへのコミュニケーション
 * メンバー同士のコミュニケーション

ここではリーダーと表現しましたが、マネージャー、エンジニアリングマネージャー、プロジェクトマネージャーと置き換えても大丈夫です。

それぞれのパターンにおいて私が経験してきた気をつけるべきポイントと、どうすれば良いのかを紹介していきたいと思います。

== コミュニケーションの取り方の原則

まず前提としてどのパターンでも通じる原則があります。それは謙虚（Humility）、尊敬（Respect）、信頼（Trust）の3つの精神です。これはHRT(ハート)と呼ばれ、Team GeekというGoogleでリーダーを務めたITエンジニアが書いた本に登場した概念です。それぞれ次のような概念となっています。

 * 謙虚（Humility）
 ** 驕り高ぶらず、自分が常に正しいとは限らないことを念頭に置き、常に自分を改善する姿勢でいること。
 * 尊敬（Respect）
 ** 他のチームメンバーを心から思いやろう、相手はコンピューターできなく尊敬すべき一人の人間であり、その能力や功績を高く評価すべきだ。
 * 信頼（Trust）
 ** 他のチームメンバーは有能であり、正しいことをすると信じることで、積極的に権限以上を行おう(ただし無能な人には気をつけて)

これらを念頭に置いて行動することで多くの問題は解決できますが、良かれと思って行動したことが裏目に出たり、他のメンバーがHRTを尊重しない場合もあります。原則はあくまで原則であり、実際の現場で起きていることに適応しないと活かせないのです。次から3つのパターンごとに実際に起きた事例と対処方法を紹介していきます。

== リーダーからメンバーへのコミュニケーション

=== メンバーを否定しないで肯定する

例え内心(それはないな…)と感じても表に出さず一度肯定してから伝えることが重要です。当たり前に思えて意外とできてない人も多いと思います。特に意識していないと自分の率直な感想が出がちですが、そうするとメンバーが否定された!と感じてしまうかもしれません。

例えば年次目標に3冊技術書を読むと言ったメンバーがいるとします。この1年で3冊は普段から本を読む人からすると正直少ないと私は思います。ですが、ここで素直に「少ないですね」と言ってしまうとメンバーが否定された!と感じてしまうかもしれません。「まずは今年3冊確実に、来年から量を増やしていきましょう」などのように表現すると良いでしょう。

他にも否定から入るのが口癖のようになってしまっている人もいると思います。メンバーから何か言われた時に「いや、それは…」とか、「そうじゃなくて、これは…」とかのように言ってしまうケースです。このような言動を繰り返しているとメンバーは何を言っても否定されると思い、そのうち何も言わなくなってしまいます。もし心当たりがある人は「確かにそうですね。でも他の可能性として…」の様に言い換えることを意識してみると良いでしょう。

=== 聞かれない限りアドバイスしない

否定しないに関連して、メンバーが否定された!と思う行動のひとつにリーダーからの押し付けがましい身勝手なアドバイスがあります。オススメの本を紹介する、こういう行動を取ると良い、こういう考え方をすると良いとアドバイスするのも、メンバーにとっては自分の選んだ本を否定された!自分の考えを否定された!となる可能性があるので、関連した話題が出てもメンバーから明確に聞かれない限り、または質問されない限りアドバイスしない方が賢明です。

ちなみに私の経験としてアドバイスしたら自分の考えを否定された!と感じたメンバーはチームリーダーになりたいというキャリア志向の持ち主であり、上長からリーダーについてアドバイスをして欲しい、次のキャリアとして後進育成もやって欲しいと言われた中でアドバイスをした結果、メンバーには否定された!と感じられました。このように上昇志向がありキャリアアップを望んでいる人に対するアドバイスでもメンバーからすると否定された!となってしまう可能性があるのです。そのため、上長からの依頼であっても、良かれと思っても、本人が望んでいても、明確に求められない限りアドバイスはするべきではないでしょう。

これは後にも書きますが、チーム結成時、そして定期的に希望を確認すると回避できるでしょう。本人がアドバイスを望むのか?望むのならどんなアドバイスを望むのか?頻度やきっかけは?こういった項目を事前にメンバーと擦り合わせておくとメンバーの否定された!という思いを防ぐことができます。

=== こちらに非があれば謝罪する

これも当たり前に思えて、会話の流れで謝罪せずに終わらせてしまうと後々問題になることがあります。また、リーダーが「そんな細かいこと…」と思っていてもメンバーは気にしているかもしれないので、きちんと謝罪する癖をつけておきましょう。

とはいえ、何でもかんでも謝罪しても仕方ないので、ポイントとしては指摘をした際が重要です。リーダーとはいえ人間ですので勘違いもあれば、ミスもあります。その際、間違った指摘をしてしまったときはきちんと謝罪をするようにしましょう。

ここで最初に書いた@<b>{会話の流れで謝罪せずに終わらせてしまう}ケースが発生し得ます。例えばメンバーが書いたコードを見ながら会話していて「ここ間違ってるよ」と指摘したのに設計書通りで正しかったという場合に「あ、私のミスだった。で、次は～」「ごめんね、で次は～」「すまん、違ってた。で、次は～」のように明確に謝罪しなかったり、しても流れで謝罪しているとリーダーが非を認めなかった!謝罪がなかった!とメンバーが感じてしまう可能性があります。ここはきちんと「すいません、私が間違ってました。」と謝罪するようにしましょう。

=== 指摘をする際にはエビデンスを用意してから指摘する

一つ前の話の防止策にもなるのですが、メンバーに対して何かしらの指摘をする際にはコード、設計書、テスト結果などのエビデンスを用意しましょう。なぜならば、その指摘内容に誤りがあると謝罪が必要になり、うまく謝罪できないとメンバーの不信感につながります。そのため、指摘する前にエビデンスを用意してから指摘しましょう。もし会話の最中などで気づいた場合は「確認したい点がある」と言って一緒にエビデンスを確認してから指摘するようにしましょう。

=== 無理難題を言われても断らず、かと言って確約もしない

チームメンバーからこうして欲しいという要望があっても、様々な事情でそれを叶えられない場合があります。そういった場合に詳細に理由を説明し、難しい、できないと回答しても、メンバーからするとリーダーがこちらの要望を聞いてくれない!という感情につながりかねません。

かといって、できもしないことを約束するのは悪手です。その場は収まっても後で約束が守れないとなった場合に問題が悪化するからです。また、過去にこの件についてTwitterで聞いてみたところ、リプくださった2名の方はできもしないことを約束されるより、詳細に理由を説明してほしいとのことでした。このことからも空約束するよりも詳細に理由を説明した方が無難ではあります。

そこでまずは「理由があって難しいですが、実現できるように努力します。その理由としては◯個あって1つ目は～」のようにメンバーの意に沿う用にしつつ、できない理由を説明しましょう。そして最後に「できれば要望を叶えたいと思っているので努力しますが、どうしても難しい場合はご理解ください」とまで言えばメンバーの納得度も高まるでしょう。さらにこの説明は口頭で行った場合は文章にしておく(メールやチャットで送っておく)と安心です。あとで蒸し返された際に説明を行ったエビデンスとなります。

=== プラクティスを押し付けない、正当化しない

システム開発には様々なプラクティスがあり、不確実性の高いシステム開発に対応するには日々やり方を工夫しないとうまくいきません。ですが、チームメンバーはリーダーから振られたタスクをただこなせば良いと思っているケースがあります。そういったメンバーに、効率がいいから、あなたのため(教育、スキルアップ)になるから、などと言っても響かないですし、プラクティスに割く体力、時間を無駄だと感じることがあります。

そのため、リーダーが良いと思ったプラクティスでも、いくら現在のタスクをこなすために効率が良いプラクティスでも、メンバーが嫌がりそうなら多少効率が悪いやり方でも従来のやり方で進めるのが良いでしょう。

実際にメンバーから不評がられたプラクティスとしてはペアプロ、モブプロ、アイスブレイクがあります。

==== ペアプロは疲れるから嫌

これはリーダー側から定期的に休憩を取るようにすべきだったのを作業が進みすぎてしまったがために休憩が取れず、拘束時間が長くなってしまったため、メンバーが疲れてしまったケースです。

リマインダーやタイマーでもセットして強制的に作業を区切ればよかったですが、そういった工夫をしなかったためメンバーの疲労が溜まってしまう原因となりました。定期的に休憩を取れば解決する話ですが、ペアプロ、モブプロは進捗が良い分、作業を区切りづらいです。必ず最初に何時間やったら休憩というのを決めておき、タイマーなどをセットしておきましょう。一度疲れると認識されると二度とペアプロやモブプロをやりたくないと思われてしまいます。

==== モブプロで汗をかくから同じキーボードを使いたくない、実装中のコードを見られたくない

これはメンバーが手汗をかくため、同じキーボードを使い回したくないということがありました。それぞれがキーボードを用意してドライバー交代時にキーボードも交換することで解決しますが、本人は手汗を書くことを気にしているので根本的な解決にはなっていません。

また、メンバーによっては実装中のコードを見られたくないという人もいました。レビューはどうするのか?と聞くと我慢していると言っていたので、コードを見られるのが嫌という人もいるようです(正直チーム開発に向いてないんじゃないかと思いましたが、まぁそういう人もいるということでしょう)

==== 早く作業したいのにアイスブレイクが長い

私のチームでは毎日の朝会で最初にアイスブレイクとしてハピネスレーダーをやっています。この時間が長いため、朝会が長くなり、作業時間が削られて嫌だ感じたメンバーがいました。こちらはリモート開発で雑談が少ないことへの対策、ルーティンとしして毎朝行うことでモードを仕事モードに切り替えるなどの意味を持ってやっているわけですが、無駄だと思われているようです。

アイスブレイクにかかる時間としては5分以内、長くても10分以内に終わっています。朝会自体も長くて30分です。メンバーが不満を感じた際のチーム人数は二人でした。これはメンバー側にアイスブレイクの意図が伝わっていない可能性がありますが、意図はちゃんと最初に説明しています。それでも不満に思うメンバーはいるので不満を感じていそうだなと思ったり、フィードバックを受けた際は押し付けないでやめたほうが良いでしょう。

ちなみにそのメンバーに朝会のふりかえりとして無駄な項目はないか?と聞いたら特に無いと言っていたので、アイスプレイクが無駄という不満を感じておきながら無駄な項目はないという矛盾した言動を取っています。このようにメンバーは本音と建前を使い分けるのでリーダーからすると本音を見抜くのは大変ですが、チーム開発を円滑に進める上で重要なポイントなので気を配りましょう。正直こういった気を使わなくても一緒に開発できるメンバーが欲しいのがリーダーとしての本音ですが、残念ながら多くの場合においてメンバーは選ぶことはできません。与えられたカードで勝負するしかないのです。

=== みんながみんなアジャイルなどが好きな訳では無い

ひとつ前のプラクティスを押し付けないにも関わりますが、ITエンジニアのみんながみんなアジャイルが好きなわけでもないですし、スクラムやXPなどの開発手法に興味があるわけではありません。たとえアジャイルがどんなに素晴らしい考え方でもそんなことどうでもいい、割り当てられたタスクさえ終わればそれでいいと思っているITエンジニアもいるのです。

私はアジャイルやスクラムの考え方やが大好きなので、メンバーにもそう思って欲しいと考えてしまいますが、それは単なる押しつけにすぎません。開発を進める上で明らかにアジリティが低い、問題があると思っても、それを理由にいきなり正論で、アジャイル棍棒で殴ってもメンバーが不満に思う可能性が高いです。特に「正しそうで反論しづらい概念」については注意が必要です。正論だから、こちらが正しいからという理由で自分の意見を押し付けていると相手の反論を押さえ込んでしまい、モチベを奪いかねません。正しいことを言うのが正しくないこともあるのです。

そこで、まずは他人を変えるのではなく自分で変えましょう、自分が変わりましょう。開発に問題があれば黙々と手を動かして解決する手段を構築すればよいのです。そして効果が出て感謝され、信頼貯金が溜まってきたら新しいプラクティスや考え方の提案をしましょう。信頼貯金がない中で提案しても採用されづらいですし、正論でかかっても反感を買うだけで上手く行かない可能性が高いです。それなら自分で手を動かしてまずは実績を作りましょう。

== メンバーからリーダーへのコミュニケーション

=== 可能な限り直接フィードバックをする

リーダーとはいえ人間です。当然たまにはミスや間違いを犯します。前に挙げたリーダーからメンバーへのコミュニケーションの内容についても、同じような不満を覚えた方もいらっしゃるでしょう。

そのときはできるだけリーダーに直接フィードバックしましょう。大体の場合、リーダーはメンバーより年上や経験が豊富な方がつくことが多いので、何か進言するのは憚られる、言いづらいから気が進まないとは思いますが、ここで言いやすいからと第三者を通してもデメリットはあれどあまりメリットはありません。例えば次のようなデメリットがあります。

 * 伝言ゲームになってしまう
 * アジリティが下がる
 * 問題が大きくなってしまう
 * チームが自立しなくなる

第三者を通した場合、リーダーの視点とメンバーの視点の違いを考慮しなくてはいけません。もしこの視点の違いを理解してない人を通してしまうと、言ってることが捻じ曲がってしまい、伝言ゲームの様になってしまいます。また言った言わないの水掛け論にもなりかねません。これは直接会話することで簡単に防げるのでメンバーはリーダーに対して直接フィードバックした方がメリットがあります。

また、第三者は公平な立場に立とうとするのでメンバーから言われたことを鵜呑みにせず、リーダーにも事情を聞こうとします。この時点でリーダーに対して会話する時間を調整し会話しと時間がかかってしいます。直接会話すれば5分で解決するかもしれない話が、1時間、2時間とかかり、かつ、解決にも時間を要してしまい、チームのアジリティが下がります。

第三者を通すことでチーム内だけで完結できていたはずの話が組織、または会社全体の問題になりかねません。その分、関わる人も多くなり多くの人の時間を奪ってしまいます。それが管理職としての仕事といえばそれまでですが、当人が会話して解決すれば無駄な時間を使わなくて済むのも事実です。

最後は一つ前にも関連することですが、チーム内の問題をチームで解決できないとなるとチームが自立しません。常に第三者がいないと成り立たないチームはすでに破綻していると言っていいでしょう。本来チームの問題はチーム内で解決すべきで、それが自立したチームというものだと思います。そのためにも対話が必要であり、フィードバックは直接行った方が良いのです。

==== フィードバックする際の工夫

フィードバックは問題や不満を感じたその場で行うのが最も効率が良いのですが、その場では言い出せず後々になってしまうことがよくあります。その際、今更言うのもなと言い出せずになぁなぁにしたり、言い出しづらいから第三者を頼ったりしてしまいます。

なにもフィードバックは直接口頭で伝えるだけではありません。DMやメールなどの文章で伝えてもいいのです。その方が言いたいことが整理されますし、感情的にならず改善して欲しい点も伝えることができます。コミュニケーションがうまく取れないという自覚がある人は文章で伝える努力をしてみましょう。

またフィードバックする際に役立つ知識してNVC(非暴力コミュニケーション)が役立つと思います。NVCは相手や自身の気持ちを大事にして、誤解や偏見を見きわめて本当にやりたいこと、望むことを見出して自らの力で実現する原動力が生まれるコミュニケーションプロセスです。重要なのは自分と相手の気持ちを大事にする点で、フィードバックするにしても不満を言うだけではなく、自分と相手の気持ちを大事にしてフィードバックすることが可能になります。NVCはメンバーだけでなくリーダーにも有効な手法ですが、メンバーが心得ているとより円滑にチーム運営が進むでしょう。

=== 逃げるべきこんなリーダー

チームのためにフィードバックしてほしいと書きましたが、リーダーによっては独善的で改善する気持ちがなく、またはハラスメントをするようなタイプの人もいるでしょう。そういったリーダーに対してまで直接フィードバックするべきとは言いません。なによりまず自分を守るのが大事です。チームはその後です。次のようなリーダーからはチーム外の第三者を頼ってでも抜け出した方がいいでしょう。

 * 怒る、キレる、怒鳴る人
 * セクハラしてくる人
 * 常に正論しか言わない人
 * 自分の経験しか信じない人

過去に直接関わったことはないですが、こういった言動をする人を見てきました。そしてそのチームにいる人はメンタルを病んでしまうことが多かったです。チームのために行動するのも大事ですが、あくまで自分あってこそのチームなのでまずは自分を守ることを優先しましょう。

== メンバー同士のコミュニケーション

=== 相手の地雷に注意する

メンバー同士のコミュニケーションでありがちなのが、知らず知らずのうちに相手の地雷を踏み抜いていたということがあります。自分は問題ない言葉、語句、表現、やり方だったとしても相手には問題がある可能性があります。そのため、コミュニケーションを取る際には言葉遣いに気をつけた方がいいでしょう。例えば次のようなことは要注意です。

 * 自分が嫌いな技術、苦労した技術をけなさない
 * ビジネスライクにもフランクにもなりすぎない
 * バグやイマイチなコードをあげつらわない

一つ目は自分が嫌いなプログラミング言語、技術や、過去に苦労した技術をけなさないというものです。過去に自分が経験したこととしては、とあるプログラミング言語に対してツライ点があるとSlackに投稿したところ、そのSlackにはそのプログラミング言語が好きな人が多く、そういった不満は見てる人に嫌な思いさせないようにすべきという投稿がされたことがあります。自分が嫌いでもツライ経験があってもチームメンバーもそうとは限らないので、愚痴や不満は安易に投稿すべきではないでしょう。

昨今はリモートから出社に回帰し始めていますが、それでもテキストコミュニケーションが主流になっていると思います。そこで投稿するテキストがビジネスライクすぎる、つまりいつも文末が句読点で終わっていたり、感情が感じられないとリモートに慣れてない相手だと怒ってる、機嫌が悪いと勘違いされることがあります。仕事なのであまりフランクな表現は使うべきではないですが、!や〜などは使っても問題になりづらいでしょう。また、絵文字が使いづらいという方はリアクションで使うのがおすすめです。逆にテキストがフランクすぎると馴れ馴れしいと感じられることがあるので、硬すぎるのが良くないからといってフランクになりすぎるのもよくないです。バランスが重要なのでよく他のメンバーを観察して柔軟に変える必要があるでしょう。

最後は発生したバグやイマイチなコードを槍玉に上げてしまうとそれを実装した人がチームメンバーだったりすると一気に空気が悪くなります。自分が改修する際にバグを踏んで手間取ったり、緊急対応で時間を取られたりすると槍玉に上げたくなりますが、実装した当人に悪気なんてないですし、槍玉に挙げたところで問題が解決するわけではないのでデメリットしかありません。愚痴を言うなら機密情報は伏せた上でSNSや匿名ブログ、仕事に関係ない閉じた空間の無関係ない相手にすべきでしょう。

== コミュニケーションは最初が肝心

ここまでチームにおけるコミュニケーションをパターンごとに見てきましたが、どのパターンにも適用できる対処法としてチームのキックオフ時期に以下の項目を明確にしておくと良いでしょう。

 * チーム運営方針の合意を取る
 ** 会議体
 ** 朝会
 ** 1on1
 ** 定期的なふりかえり実施の合意など
 ** 新しいプラクティス適用の有無
 ** コミュニケーションの取り方
 ** 教育についてなど
 * リーダー、メンバーそれぞれが明確にすること
 ** 私が実現したいこと
 ** やりたいこと/やりたくないこと
 ** 我慢できること/我慢出来ないこと
 ** やってほしくないこと

これはリーダーが行うべきことではありますが、やってくれない場合はメンバーから働きかけて明確にするのも良いでしょう。リーダー・メンバー間だけでなく、メンバー同士でも認識の齟齬が減るのはチーム開発を行う上で非常に重要です。最初に認識の齟齬をなくすのも重要ですが、継続してその努力を続けていくのも重要です。

== さいごに

コミュニケーションは古城に難しいです。人間相手ですので、ここに特性があり、気を使うこと、考えるべきことが多く、正解もないので苦労します。

それでもチーム開発を行う上では避けては通れない道ですので、なんとか負担をなくし、円滑にチーム開発を進めていきたいです。

それには途中でも触れたNVCがひとつの特効薬になるかもしれません。これはリーダーだけでなく、チーム全体で行うことでさらに効果が出るでしょう。習得するには大変な手法ですが、効果はあると思うので気になる方はぜひ書籍などをご覧ください。

それでは、すべてのチーム開発がうまくいくことを願って、本章の内容がそれに少しでも役立つことを願って締めたいと思います。
