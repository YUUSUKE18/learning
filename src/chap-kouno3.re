= 学びのために教育学の基本を勉強してみた！

//flushright{
	こうの@hk_it7
//}

== 一番「学び」を研究していそうな分野を勉強すれば学びを得られるのでは？

「学び」を考えたときに真っ先に浮かんだことは、自分はどうやって学んできたのだろうかということです。

自己学習も多かったですが、IT関係の知識以外の広範な基礎知識のほとんどは学校教育で習ったものです。

そこで多くの知識を与えるために体系化された「教育学」のエッセンスを学ぶことで、自分や他の人の学びにつなげることができるのではと考えました。

== 本章で取り上げる教育学的なアプローチ

とはいえ教育学は膨大で、それだけで大学のカリキュラムになってしまいます。そのため有名そうなところをつまみ食いして勉強し、それをまとめます。

本章で取り上げる教育学的なアプローチは次の通りです。

 * 4段階教授法
 * 5段階教授法
 * 9教授事象
 * プログラム学習の5原理
 * 問題解決学習

では、順番に紹介していきます。

== 4段階教授法

4段階教授法は、学習者がなにかを学ぶメカニズムを4つの段階で定義したものです。

 * 明瞭：学ぶ事象を明瞭にする
 * 連合：明瞭化した事象を既知の概念と比較する
 * 系統：連合された物事を体系化する
 * 方法：系統化した事象をほかのものに応用可能にする

そもそもここで言う「教授」の前提には「管理」と「訓練」という2つの概念があります。

 * 管理：教育の妨げを除外する
 * 訓練：正しい方向に正す

一方で「教授」は教材を通して間接的に働きかけを行います。当然ながら学ぶ主体は学習者と教材側にあるわけです。

教授法と聞くと「教師がどのように教えるか」という概念のように思えますが、4つの段階を見ると学習者視点での知識獲得までの流れを示していることがわかります。

この4段階教授法は『一般教育学』にてヘルバルトによって示され、体系化したことにより「教育学」が学問分野として確立したきっかけになります。それまでの「教育」は「教育者」の経験や技能、感覚に基づくもので体系化されていませんでした。

ヘルバルトは経験のない人に一定の方針を出すことでベースアップを目指しました（教育的タクトというらしいです）。そのため、教師がどう教えるかではなく、学習者がどう学んでいるかを体系化し、レールを作ったということですね。

この4段階教授法は4段階目に「方法」として「応用可能にする」ところまでを知識獲得の定義にしていることが面白いところかと思います。つまりは暗記だけに終わるものは学習ではないということでしょうか。耳が痛いです。

ここからは新たなプログラミング言語の習得という具体例を使い、4段階教授法を深堀りしようと思います。

=== 明瞭：学ぶ事象を明瞭にする

まずは学ぶ対象を明確化します。ここではTypeScriptを学ぶことを想定します。

もともと別の言語を習得している人が学ぶという前提に立つと、ここでの学びの対象はアルゴリズムやデータ構造ではなく文法がメインになりますね。

JavaScriptをすでに習得している場合、さらに具体化して「型定義や型システムについて」が学ぶ対象になります。

それらについて明確な知識にします。

 * 文法は基本的にJavaScriptと一緒
 * 型の記述がとても柔軟
 * 型システムは構造的部分型

=== 連合：明瞭化した事象を既知の概念と比較する

続いて明確になった知識を既知の概念と比較していきます。

TypeScriptを学んでいくなかで以下のようなことに気づいていきます。

 * 型システムがJava（公称型）とは異なる
 * Javaと同じように型を扱うにはclassにしてprivateな変数を持つ
 * 型システムがGo（構造的部分型）と少し似ている
 * JavaScriptに対して新しい文法も入っている
 * SassとCSSの関係のようにトランスパイルする

=== 系統：連合された物事を体系化する

他の言語と比較してTypeScriptの特徴が見えてきました。それらを少し抽象化してみます。

 * 構造的部分型は型のインターフェイスに注目して型を判別する
 * スーパーセットとトランスパイルによって既存言語を大きく拡張できる

などなど、学べば学ぶほどここで列挙しきれないほどの特徴が見えてくることでしょう。

=== 方法：系統化した事象をほかのものに応用可能にする

さて、最後に応用可能な状態にしましょう。

例えば次のようなものです。

 * 構造的部分型と公称型というものがあり、他の型付け言語もこれらの考えを持っている
 * トランスパイルすることでベースの言語のエコシステムに乗っかることができる

上記の知識が定着すれば、さらに別の言語を学ぶ際に、「JavaとKotlinの関係性はJavaScriptとTypeScriptに似ている」や「PHPのPHPStanはTypeScriptの型システムっぽい」等の気づきが得られます。

これは応用可能な状態になっていると言えそうです。

== 5段階教授法

続いて5段階教授法についてです。これはツィラーのものとラインのものがありますので、まずはそれぞれを説明します。

== ツィラーの5段階教授法は4段階教授法の順当な発展形

ツィラーはヘルバルトの4段階教授法における「明瞭」を2つに分割して以下の5段階教授法を示しました。

 * 分析
 * 総合
 * 連合
 * 体系
 * 方法

ツィラーの5段階教授法も学習者がどう学んでいくかに焦点を当てたものです。

「明瞭」で学ぶ対象がどんなものであるかを調べていきますが、その過程は「分析」と「総合」からなるとしました。

「分析」では対象を細かく見て単純な構造の組み合わせとして捉えるようにしていき、「総合」では「分析」で明らかにした単純な構造を再構築します。

これは具体と抽象を行き来する過程に似ています。「分析」と「総合」を通して学びを深めていくことを意味します。

== ラインの5段階教授法は教師側に対する論理

一方、ラインは教師側から教授法を再定義しました。つまり、ヘルバルトとツィラーが学ぶ側のメンタリティを段階的に示したのに対して、ラインは教える側のステップを示しています。

ラインが示した5つの段階は次の通りです。

 * 予備：既知の概念を整理する
 * 提示：新しい学習対象を提示する
 * 比較：新しい対象と既知の概念を比較する
 * 概括：比較結果をもとに体系化する
 * 応用：体系化された知識を応用して利用する

この5段階教授法は日本にも輸入され、教師中心の学校教育の基本となりました。一方、現在の日本の学校教育はアクティブラーニングや「主体的・対話的で深い学び」を主軸にしています。そちらは「問題解決学習」で後述します。

ラインの5段階教授法を詳しくみます。ここでは具体例として四角形の内角の和を導出する授業を考えます。

=== 予備：既知の概念を整理する

既知の概念として「三角形の内角の和が180°であること」があります。

そこから「四角形の内角の和を導き出す」にはどうしたら良いか問いかけます。

=== 提示：新しい学習対象を提示する

新しい学習対象である四角形の内角の和を考えるために、四角形を例示します。

そして、対角線を1本引くことで2個の三角形で四角形が成り立っていることを確認します。

最後に2つの三角形の内角の和を足し合わせることで、四角形の内角の和が360°であること示します。

これで新しい学習対象である「四角形の内角の和」が360°であることを提示できました。

=== 比較：新しい対象と既知の概念を比較する

比較ではより、詳細に新しい学習対象を調べていきます。

台形ではどうなるか、凹みのある四角形でも同じなのかなどです。

そこで改めて「四角形は常に2つの三角形に分割できるから、内角の和は180°+180°=360°になる。」ことを示します。

=== 概括：比較結果をもとに体系化する

学習結果をまとめます。次のようなことが考えられます。

 * 三角形の内角の和が180°であること。
 * 四角形は三角形2つに分割できること。
 * 四角形の内角の和が360°であること。

=== 応用：体系化された知識を応用して利用する

最後に応用を考えていきます。例えば「五角形や六角形の内角の和を求める」のようなものです。

五角形であれば三角形が3つ、六角形であれば三角形が4つで構成されることがわかります。

結果として頂点の数をnとして(n - 2) * 180が多角形の内角の和になることが導出できます。

== 9教授事象

ガニエの9教授事象は、効率的に教えるためのシステムです。より具体的にどういうことを行ったら良いか示しています。

次のように整理されています。

 * 導入
 ** 学習者の注意を喚起する
 ** 学習の目標を知らせる
 ** 前提条件を思い出させる
 *  情報提示
 ** 新しい事項を提示する
 ** 学習の指針を与える
 *  学習活動
 ** 練習の機会をつくる
 ** フィードバックを与える
 *  まとめ
 ** 学習の成果を評価する
 ** 保持と転移を高める

勉強会やワークショップの設計に利用できるフレームワークかと思います。

== プログラム学習の5原理

行動心理学の観点から、オペラント条件付けを学習に応用するために考えられたものが「プログラム学習の5原理」です。

オペラント条件付けは自発的な行動後の変化によって自発行動の頻度が変化する学習のことです。

//table[operant][オペラント条件付けの例示]{
行動	結果	行動随伴性	刺激	変化
-------------------------------------------------------------
仕事を丁寧にやる	報酬がもらえる	正の強化	報酬（好子）	行動増加
仕事を雑にやる	報酬がもらえない	負の弱化	報酬（好子）	行動減少
仕事を雑にやる	怒られる	正の弱化	怒られ（嫌子）	行動減少
仕事を丁寧にやる	怒られなくなる	負の強化	怒られ（嫌子）	行動増加
//}

本来は「行動」と「結果」の前に「条件」という要素@<fn>{three_term}があるのですが、ここでは説明を省きます。

//footnote[three_term][三項随伴性と言います。オペラント条件付けの詳しい説明は主題から離れるので詳細は各自調べてください。]

次の5つの原理から構成されます。

 * スモールステップの原理
 * 即時確認の原理
 * 積極的反応の原理
 * 自己ペースの原理
 * 学習者検証の原理

それぞれの原理を見ていきます。

=== スモールステップの原理

学習のステップを細かく設定するほうが良い、というものです。

学習者が失敗しないように細かく設定します。何か失敗してしまうと、間違えた理解で定着してしまう危険性があります。

=== 即時確認の原理

学習者が問題や質問に答えた際は、すぐに正否を知らせます。即時フィードバックですね。

次の問題や質問より前に学習者の反応が正しかったかどうかフィードバックすることで定着を促します。

正しいことをしたことがすぐにわかったことが学習意欲も向上しますよね。

=== 積極的反応の原理

学習者がどのくらい理解しているかは問題への回答で判断します。

例えば学習者がいくら「完全に理解した！」と言ってもそれは外部に理解度が表出しているものではありません。

理解した内容を確認する問題に答えることで初めて学習の結果を測定します。

自己学習でもブログにアウトプットして理解の証跡にする等、応用できるかもしれません。

=== 自己ペースの原理

学習のペースはみんな違うので、自分のペースで進められるようにカリキュラムを設定したほうが良いというものです。

適切なスピードは人によって違いますし、内容によっても違うと思います。「数学は得意で学習をどんどん進められたけれど、英語は苦手で」みたいなことはありますよね。

=== 学習者検証の原理

学習プログラムの良し悪しは、あくまで当事者の学習結果で判断します。

専門家がどんなに太鼓判を押しても、実際に伝わらないのでは意味がありません。

未学習者が学習プログラムを使ってもらい、必要に応じて改善することで初めて良い学習プログラムになっていきます。

== 問題解決学習

問題解決学習は教育学者のジョン・デューイが提唱したもので課題解決型学習（PBL、Project-Based Learning）とも呼びます。知識の暗記という受動的なものではなく、「能動的に問題を発見し解決していく能力が学習の本質である」とするものです。

いわゆるアクティブ・ラーニングの一種です。アクティブ・ラーニングはグループ討論や実体験、他人に教えることなどを指します。これらは「講義を聞く」や「読書」に比べて学習定着率が高いとされています。

ところで、エンジニア文化としてはOST（オープン・スペース・テクノロジー）がこの問題解決学習に当たります。

OSTとは参加者が話したいテーマを決定し、オープンな話し合いを実施する形式で、答えのない課題に対して参加者の主体的な発案と対話によって進行していきます。

日々課題解決に奔走する私達技術者は常に問題解決学習を行っていると言っても過言ではないのかもしれません。

== まとめ：これをもってどうしていくか

ここまで教育学的な学びのアプローチを列挙して紹介しました。

エンジニアが独学で勉強する場合を例にとり、ここまでの内容を活かした学習プランを立ててみます。

まず学ぶ課題の選択は問題解決学習をベースにするものになります。「何か作りたいけれど、何が最適なんだろう？」とか「この言語、全くわからないけれど、どういう思想なんだろう」とかですね。

課題をプログラム学習の5原理に従い分解します。新しい言語を学ぶケースでは、基本文法と特徴的なデータ構造、標準関数など対象を区切っていき、スモールステップを形成します。

そして学ぶ側はツィラーの5段階教授法に従いステップを踏んで学んでいきます。学習対象を分析しまとめます。このへんは技術書を読んだりネットで調べたりです。

学んだことについては積極的反応の原理の通り、アウトプットすることで理解状況を確認します。メンターのような人がいるとなお良さそうですね。

既存の知識と比較、体系化し知識の定着を行います。そして、体系化した知識をベースに次の課題にステップアップしていきます。

このように進めていくと、自分の達成感にも繋がり、外部へのアウトプットによって学習が進捗しているかの検証もできます。

自己学習を例に取りましたが、新卒者や中途入社の方への研修担当者はかなり応用できる内容が多いと思います。

教材の作り方や教えるという意味ではLTの構成などもラインの5段階教授法を参考にするなどできそうですね。

ぜひ、教育学の基礎知識を自己学習や研修に活かしてください。